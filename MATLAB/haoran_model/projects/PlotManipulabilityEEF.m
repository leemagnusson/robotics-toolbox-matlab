%% Plot Manipulability ellipsoid of the spherical arm in its work space
% This script plots the manipulability ellipsoid of the spherical arm for
% only translation in its work space. The work space is
% generated by sweeping joint 6 to 8 within their joint limits.
%%
clc
clear all
close all
load('urdf_info_1.0.mat');
load('vertex_arm_origin_1.0.mat');
load('arm_version_1.0.mat');
figure(1)
hold on
view(46,23)
axis equal
% setup arm
q=[0,0,0,0,0,0,0,0,0,0,0]';
robot_object.transformation_base_ = eye(4);
robot_object.CalculateFK(q);
robot_object.DrawRobot(vertex_arm_origin);
hold on
% input joint limits
joint_limits = [[-pi;pi] robot_object.joint_limit_(:,8) robot_object.joint_limit_(:,11) [-pi;pi] robot_object.joint_limit_(:,13) robot_object.joint_limit_(:,14)];

num_data = 1;
% sample_step = 25*pi/180;
sample_step = 10*pi/180;
% q8_plot = [joint_limits(1,3) (joint_limits(2,3)+2*joint_limits(1,3))/3 (2*joint_limits(2,3)+joint_limits(1,3))/3]
v_max = 0.03;
for q6 = joint_limits(1,1):(sample_step):joint_limits(2,1)
    for q7 = joint_limits(1,2):sample_step:joint_limits(2,2)
        for q8 = joint_limits(1,3) : 0.01 : joint_limits(2,3)
            %             for q9 = jnt_limits(1,4):(6*sample_step):jnt_limits(2,4)
            %                 for q10 = jnt_limits(1,5):(6*sample_step):jnt_limits(2,5)
            q=[0,0,0,0,0,q6,q7,q8,0,0,0]';
            robot_object.CalculateFK(q);
            [jacobian_spherical,jacobian_cartesian,jacobian_all] = robot_object.CalculateJacobianAll;
            %                 jacobian = jacobian_spherical(1:3,1:3);
            [u,e,v] = svd(jacobian_spherical(1:3,:));
            sigma_max = e(1,1);
            sigma_min = e(3,3);
            q_dot1 = pinv(jacobian_spherical(1:3,:)) * v_max * u(:,1);
            q_dot2 = pinv(jacobian_spherical(1:3,:)) * v_max * u(:,2);
            q_dot3 = pinv(jacobian_spherical(1:3,:)) * v_max * u(:,3);
            q_dot = [q_dot1 q_dot2 q_dot3];
            q_dot_max = [max(abs(q_dot(1,:)));max(abs(q_dot(2,:)));max(abs(q_dot(3,:)));max(abs(q_dot(4,:)));max(abs(q_dot(5,:)));max(abs(q_dot(6,:)))];
%             DrawRobot(frames,vertex_arm_origin,arm_color);
%             hold on
            DrawManipulabilityEllipse(e,u,robot_object.frames_(1:3,4,14),0.02)
            hold on
            condition_number(num_data) = sigma_max/sigma_min;
            eef_store(:,num_data) = robot_object.frames_(1:3,4,14);
            q_store(:,num_data) = q;
            max_joint_velocity_store(:,num_data) = q_dot_max;
            num_data = num_data + 1;
            %                 end
            %             end
        end
    end
end
light('Position',[1 3 2]);
light('Position',[-3 -1 -3]);
axis([-1 1 -1 0.5 -0.2 1.2]);
grid on
grid minor
drawnow;
% save('../export/eef_max_joint_velocity.mat','condition_number','eef_store','q_store','max_joint_velocity_store')
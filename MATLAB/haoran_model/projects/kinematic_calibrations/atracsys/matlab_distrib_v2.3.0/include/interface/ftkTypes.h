// ===========================================================================
/*!
 *   This file is part of the ATRACSYS fusiontrack library.
 *   Copyright (C) 2003-2015 by Atracsys LLC. All rights reserved.
 *
 *  THIS FILE CANNOT BE SHARED, MODIFIED OR REDISTRIBUTED WITHOUT THE
 *  WRITTEN PERMISSION OF ATRACSYS.
 *
 *  \file     ftkTypes.h
 *  \brief    Standard types
 *
 */
// ===========================================================================

#ifndef ftk_ftkTypes_h
#define ftk_ftkTypes_h

#include "types_config.h" // Generated by CMake using soft.atr.cmake settings

#include "ftkPlatform.h"

#if defined( ATR_WIN )

typedef unsigned char uint8; /*!< \brief  8 bits unsigned */
typedef unsigned short uint16; /*!< \brief 16 bits unsigned */
typedef unsigned int uint32; /*!< \brief 32 bits unsigned */
typedef unsigned long long uint64; /*!< \brief 64 bits unsigned */
typedef signed char int8; /*!< \brief  8 bits signed */
typedef short int16; /*!< \brief 16 bits signed */
typedef long int32; /*!< \brief 32 bits signed */
typedef long long int64; /*!< \brief 64 bits signed */
typedef float float32; /*!< \brief single precision floating point (32 bits) */
typedef double float64; /*!< \brief double precision floating point (32 bits) */
typedef unsigned char bool8; /*!< \brief boolean values */

    #define SCNi32 "i"
    #define SCNu32 "u"
    #define SCNx32 "x"
    #define PRIi32 "i"
    #define PRIu32 "u"
    #define PRIx32 "x"

    #define SCNi64 "I64i"
    #define SCNu64 "I64u"
    #define SCNx64 "I64x"
    #define PRIi64 "I64i"
    #define PRIu64 "I64u"
    #define PRIx64 "I64x"

#elif defined( ATR_LIN )

    #ifndef __STDC_FORMAT_MACROS
        #   define __STDC_FORMAT_MACROS
    #endif

    #include <inttypes.h>
typedef uint8_t uint8; /*!< \brief  8 bits unsigned */
typedef uint16_t uint16; /*!< \brief 16 bits unsigned */
typedef uint32_t uint32; /*!< \brief 32 bits unsigned */
typedef uint64_t uint64; /*!< \brief 64 bits unsigned */
typedef int8_t int8; /*!< \brief  8 bits signed */
typedef int16_t int16; /*!< \brief 16 bits signed */
typedef int32_t int32; /*!< \brief 32 bits signed */
typedef int64_t int64; /*!< \brief 64 bits signed */
typedef float float32; /*!< \brief single precision floating point (32 bits) */
typedef double float64; /*!< \brief double precision floating point (32 bits) */
typedef uint8_t bool8; /*!< \brief boolean values */

#endif

/// Internal bool type
typedef uint8 bool8;

#ifndef __cplusplus
#ifndef BOOL_TYPEDEF_DONE
$define BOOL_TYPEDEF_DONE
typedef _Bool bool;
#endif
#endif

#if REALWIDTH == 32
/// Generic type for floats. Is now float32, may be float64 in the future
typedef float32 floatXX;
#else
/// Generic type for floats. Is now float32, may be float64 in the future
typedef float64 floatXX;
#endif

#endif
